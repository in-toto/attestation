// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 24.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `in_toto_attestation/predicates/vulns/v0.2/vulns.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.Vulns)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vulns {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Vulns.scanner)
    pub scanner: ::protobuf::MessageField<Scanner>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Vulns.metadata)
    pub metadata: ::protobuf::MessageField<ScanMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.Vulns.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vulns {
    fn default() -> &'a Vulns {
        <Vulns as ::protobuf::Message>::default_instance()
    }
}

impl Vulns {
    pub fn new() -> Vulns {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Scanner>(
            "scanner",
            |m: &Vulns| { &m.scanner },
            |m: &mut Vulns| { &mut m.scanner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ScanMetadata>(
            "metadata",
            |m: &Vulns| { &m.metadata },
            |m: &mut Vulns| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vulns>(
            "Vulns",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vulns {
    const NAME: &'static str = "Vulns";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scanner)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scanner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scanner.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vulns {
        Vulns::new()
    }

    fn clear(&mut self) {
        self.scanner.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vulns {
        static instance: Vulns = Vulns {
            scanner: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vulns {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vulns").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vulns {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vulns {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.Scanner)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Scanner {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Scanner.uri)
    pub uri: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Scanner.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Scanner.db)
    pub db: ::protobuf::MessageField<VulnDatabase>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Scanner.result)
    pub result: ::std::vec::Vec<Result>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.Scanner.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Scanner {
    fn default() -> &'a Scanner {
        <Scanner as ::protobuf::Message>::default_instance()
    }
}

impl Scanner {
    pub fn new() -> Scanner {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uri",
            |m: &Scanner| { &m.uri },
            |m: &mut Scanner| { &mut m.uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Scanner| { &m.version },
            |m: &mut Scanner| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VulnDatabase>(
            "db",
            |m: &Scanner| { &m.db },
            |m: &mut Scanner| { &mut m.db },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "result",
            |m: &Scanner| { &m.result },
            |m: &mut Scanner| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Scanner>(
            "Scanner",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Scanner {
    const NAME: &'static str = "Scanner";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uri = is.read_string()?;
                },
                18 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.db)?;
                },
                34 => {
                    self.result.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.db.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        if let Some(v) = self.version.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.db.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.result {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Scanner {
        Scanner::new()
    }

    fn clear(&mut self) {
        self.uri.clear();
        self.version = ::std::option::Option::None;
        self.db.clear();
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Scanner {
        static instance: Scanner = Scanner {
            uri: ::std::string::String::new(),
            version: ::std::option::Option::None,
            db: ::protobuf::MessageField::none(),
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Scanner {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Scanner").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Scanner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Scanner {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.VulnDatabase)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VulnDatabase {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.VulnDatabase.uri)
    pub uri: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.VulnDatabase.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.VulnDatabase.last_update)
    pub last_update: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.VulnDatabase.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VulnDatabase {
    fn default() -> &'a VulnDatabase {
        <VulnDatabase as ::protobuf::Message>::default_instance()
    }
}

impl VulnDatabase {
    pub fn new() -> VulnDatabase {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "uri",
            |m: &VulnDatabase| { &m.uri },
            |m: &mut VulnDatabase| { &mut m.uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &VulnDatabase| { &m.version },
            |m: &mut VulnDatabase| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_update",
            |m: &VulnDatabase| { &m.last_update },
            |m: &mut VulnDatabase| { &mut m.last_update },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VulnDatabase>(
            "VulnDatabase",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VulnDatabase {
    const NAME: &'static str = "VulnDatabase";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uri = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_update)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uri.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.last_update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uri.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.version.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.last_update.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VulnDatabase {
        VulnDatabase::new()
    }

    fn clear(&mut self) {
        self.uri = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.last_update.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VulnDatabase {
        static instance: VulnDatabase = VulnDatabase {
            uri: ::std::option::Option::None,
            version: ::std::option::Option::None,
            last_update: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VulnDatabase {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VulnDatabase").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VulnDatabase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VulnDatabase {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.Result)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Result {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Result.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Result.severity)
    pub severity: ::std::vec::Vec<result::Severity>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Result.annotations)
    pub annotations: ::std::vec::Vec<::protobuf::well_known_types::struct_::Struct>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.Result.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Result {
    fn default() -> &'a Result {
        <Result as ::protobuf::Message>::default_instance()
    }
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Result| { &m.id },
            |m: &mut Result| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "severity",
            |m: &Result| { &m.severity },
            |m: &mut Result| { &mut m.severity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "annotations",
            |m: &Result| { &m.annotations },
            |m: &mut Result| { &mut m.annotations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Result>(
            "Result",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Result {
    const NAME: &'static str = "Result";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.severity.push(is.read_message()?);
                },
                26 => {
                    self.annotations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.severity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.annotations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.severity {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.annotations {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Result {
        Result::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.severity.clear();
        self.annotations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Result {
        static instance: Result = Result {
            id: ::std::string::String::new(),
            severity: ::std::vec::Vec::new(),
            annotations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Result {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Result").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Result`
pub mod result {
    // @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.Result.Severity)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Severity {
        // message fields
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Result.Severity.method)
        pub method: ::std::string::String,
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.Result.Severity.score)
        pub score: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.Result.Severity.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Severity {
        fn default() -> &'a Severity {
            <Severity as ::protobuf::Message>::default_instance()
        }
    }

    impl Severity {
        pub fn new() -> Severity {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "method",
                |m: &Severity| { &m.method },
                |m: &mut Severity| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "score",
                |m: &Severity| { &m.score },
                |m: &mut Severity| { &mut m.score },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Severity>(
                "Result.Severity",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Severity {
        const NAME: &'static str = "Severity";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.method = is.read_string()?;
                    },
                    18 => {
                        self.score = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.method.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.method);
            }
            if !self.score.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.score);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.method.is_empty() {
                os.write_string(1, &self.method)?;
            }
            if !self.score.is_empty() {
                os.write_string(2, &self.score)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Severity {
            Severity::new()
        }

        fn clear(&mut self) {
            self.method.clear();
            self.score.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Severity {
            static instance: Severity = Severity {
                method: ::std::string::String::new(),
                score: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Severity {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Result.Severity").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Severity {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Severity {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vulns.v02.ScanMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ScanMetadata {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.ScanMetadata.scan_started_on)
    pub scan_started_on: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vulns.v02.ScanMetadata.scan_finished_on)
    pub scan_finished_on: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vulns.v02.ScanMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ScanMetadata {
    fn default() -> &'a ScanMetadata {
        <ScanMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ScanMetadata {
    pub fn new() -> ScanMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "scan_started_on",
            |m: &ScanMetadata| { &m.scan_started_on },
            |m: &mut ScanMetadata| { &mut m.scan_started_on },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "scan_finished_on",
            |m: &ScanMetadata| { &m.scan_finished_on },
            |m: &mut ScanMetadata| { &mut m.scan_finished_on },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ScanMetadata>(
            "ScanMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ScanMetadata {
    const NAME: &'static str = "ScanMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scan_started_on)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scan_finished_on)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scan_started_on.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scan_finished_on.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scan_started_on.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.scan_finished_on.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ScanMetadata {
        ScanMetadata::new()
    }

    fn clear(&mut self) {
        self.scan_started_on.clear();
        self.scan_finished_on.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ScanMetadata {
        static instance: ScanMetadata = ScanMetadata {
            scan_started_on: ::protobuf::MessageField::none(),
            scan_finished_on: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ScanMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ScanMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ScanMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScanMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5in_toto_attestation/predicates/vulns/v0.2/vulns.proto\x12(in_toto_att\
    estation.predicates.vulns.v02\x1a\x1cgoogle/protobuf/struct.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\"\xa8\x01\n\x05Vulns\x12K\n\x07scann\
    er\x18\x01\x20\x01(\x0b21.in_toto_attestation.predicates.vulns.v02.Scann\
    erR\x07scanner\x12R\n\x08metadata\x18\x02\x20\x01(\x0b26.in_toto_attesta\
    tion.predicates.vulns.v02.ScanMetadataR\x08metadata\"\xd8\x01\n\x07Scann\
    er\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03uri\x12\x1d\n\x07version\x18\
    \x02\x20\x01(\tH\0R\x07version\x88\x01\x01\x12F\n\x02db\x18\x03\x20\x01(\
    \x0b26.in_toto_attestation.predicates.vulns.v02.VulnDatabaseR\x02db\x12H\
    \n\x06result\x18\x04\x20\x03(\x0b20.in_toto_attestation.predicates.vulns\
    .v02.ResultR\x06resultB\n\n\x08_version\"\x95\x01\n\x0cVulnDatabase\x12\
    \x15\n\x03uri\x18\x01\x20\x01(\tH\0R\x03uri\x88\x01\x01\x12\x1d\n\x07ver\
    sion\x18\x02\x20\x01(\tH\x01R\x07version\x88\x01\x01\x12;\n\x0blast_upda\
    te\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nlastUpdateB\x06\
    \n\x04_uriB\n\n\x08_version\"\xe4\x01\n\x06Result\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12U\n\x08severity\x18\x02\x20\x03(\x0b29.in_toto\
    _attestation.predicates.vulns.v02.Result.SeverityR\x08severity\x129\n\
    \x0bannotations\x18\x03\x20\x03(\x0b2\x17.google.protobuf.StructR\x0bann\
    otations\x1a8\n\x08Severity\x12\x16\n\x06method\x18\x01\x20\x01(\tR\x06m\
    ethod\x12\x14\n\x05score\x18\x02\x20\x01(\tR\x05score\"\x98\x01\n\x0cSca\
    nMetadata\x12B\n\x0fscan_started_on\x18\x01\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\rscanStartedOn\x12D\n\x10scan_finished_on\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x0escanFinishedOnBk\n1io.githu\
    b.intoto.attestation.predicates.vulns.v02Z6github.com/in-toto/attestatio\
    n/go/predicates/vulns/v02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Vulns::generated_message_descriptor_data());
            messages.push(Scanner::generated_message_descriptor_data());
            messages.push(VulnDatabase::generated_message_descriptor_data());
            messages.push(Result::generated_message_descriptor_data());
            messages.push(ScanMetadata::generated_message_descriptor_data());
            messages.push(result::Severity::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
