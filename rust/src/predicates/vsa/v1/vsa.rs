// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 24.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `in_toto_attestation/predicates/vsa/v1/vsa.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:in_toto_attestation.predicates.vsa.v1.VerificationSummary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VerificationSummary {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.verifier)
    pub verifier: ::protobuf::MessageField<verification_summary::Verifier>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.time_verified)
    pub time_verified: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.resource_uri)
    pub resource_uri: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.policy)
    pub policy: ::protobuf::MessageField<verification_summary::Policy>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.input_attestations)
    pub input_attestations: ::std::vec::Vec<verification_summary::InputAttestation>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.verification_result)
    pub verification_result: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.verified_levels)
    pub verified_levels: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.dependency_levels)
    pub dependency_levels: ::std::collections::HashMap<::std::string::String, u64>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.slsa_version)
    pub slsa_version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VerificationSummary {
    fn default() -> &'a VerificationSummary {
        <VerificationSummary as ::protobuf::Message>::default_instance()
    }
}

impl VerificationSummary {
    pub fn new() -> VerificationSummary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, verification_summary::Verifier>(
            "verifier",
            |m: &VerificationSummary| { &m.verifier },
            |m: &mut VerificationSummary| { &mut m.verifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time_verified",
            |m: &VerificationSummary| { &m.time_verified },
            |m: &mut VerificationSummary| { &mut m.time_verified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_uri",
            |m: &VerificationSummary| { &m.resource_uri },
            |m: &mut VerificationSummary| { &mut m.resource_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, verification_summary::Policy>(
            "policy",
            |m: &VerificationSummary| { &m.policy },
            |m: &mut VerificationSummary| { &mut m.policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "input_attestations",
            |m: &VerificationSummary| { &m.input_attestations },
            |m: &mut VerificationSummary| { &mut m.input_attestations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "verification_result",
            |m: &VerificationSummary| { &m.verification_result },
            |m: &mut VerificationSummary| { &mut m.verification_result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "verified_levels",
            |m: &VerificationSummary| { &m.verified_levels },
            |m: &mut VerificationSummary| { &mut m.verified_levels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "dependency_levels",
            |m: &VerificationSummary| { &m.dependency_levels },
            |m: &mut VerificationSummary| { &mut m.dependency_levels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slsa_version",
            |m: &VerificationSummary| { &m.slsa_version },
            |m: &mut VerificationSummary| { &mut m.slsa_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VerificationSummary>(
            "VerificationSummary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VerificationSummary {
    const NAME: &'static str = "VerificationSummary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.verifier)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time_verified)?;
                },
                26 => {
                    self.resource_uri = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.policy)?;
                },
                42 => {
                    self.input_attestations.push(is.read_message()?);
                },
                50 => {
                    self.verification_result = is.read_string()?;
                },
                58 => {
                    self.verified_levels.push(is.read_string()?);
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint64()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.dependency_levels.insert(key, value);
                },
                74 => {
                    self.slsa_version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.verifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_verified.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.resource_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.resource_uri);
        }
        if let Some(v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.input_attestations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.verification_result.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.verification_result);
        }
        for value in &self.verified_levels {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for (k, v) in &self.dependency_levels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint64_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.slsa_version.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.slsa_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.verifier.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.time_verified.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.resource_uri.is_empty() {
            os.write_string(3, &self.resource_uri)?;
        }
        if let Some(v) = self.policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.input_attestations {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.verification_result.is_empty() {
            os.write_string(6, &self.verification_result)?;
        }
        for v in &self.verified_levels {
            os.write_string(7, &v)?;
        };
        for (k, v) in &self.dependency_levels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint64_size(2, *v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint64(2, *v)?;
        };
        if !self.slsa_version.is_empty() {
            os.write_string(9, &self.slsa_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VerificationSummary {
        VerificationSummary::new()
    }

    fn clear(&mut self) {
        self.verifier.clear();
        self.time_verified.clear();
        self.resource_uri.clear();
        self.policy.clear();
        self.input_attestations.clear();
        self.verification_result.clear();
        self.verified_levels.clear();
        self.dependency_levels.clear();
        self.slsa_version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VerificationSummary {
        static instance: ::protobuf::rt::Lazy<VerificationSummary> = ::protobuf::rt::Lazy::new();
        instance.get(VerificationSummary::new)
    }
}

impl ::protobuf::MessageFull for VerificationSummary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VerificationSummary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VerificationSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerificationSummary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `VerificationSummary`
pub mod verification_summary {
    // @@protoc_insertion_point(message:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Verifier)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Verifier {
        // message fields
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Verifier.id)
        pub id: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Verifier.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Verifier {
        fn default() -> &'a Verifier {
            <Verifier as ::protobuf::Message>::default_instance()
        }
    }

    impl Verifier {
        pub fn new() -> Verifier {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Verifier| { &m.id },
                |m: &mut Verifier| { &mut m.id },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Verifier>(
                "VerificationSummary.Verifier",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Verifier {
        const NAME: &'static str = "Verifier";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.id);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.id.is_empty() {
                os.write_string(1, &self.id)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Verifier {
            Verifier::new()
        }

        fn clear(&mut self) {
            self.id.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Verifier {
            static instance: Verifier = Verifier {
                id: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Verifier {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("VerificationSummary.Verifier").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Verifier {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Verifier {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Policy)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Policy {
        // message fields
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Policy.uri)
        pub uri: ::std::string::String,
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Policy.digest)
        pub digest: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.Policy.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Policy {
        fn default() -> &'a Policy {
            <Policy as ::protobuf::Message>::default_instance()
        }
    }

    impl Policy {
        pub fn new() -> Policy {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &Policy| { &m.uri },
                |m: &mut Policy| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
                "digest",
                |m: &Policy| { &m.digest },
                |m: &mut Policy| { &mut m.digest },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Policy>(
                "VerificationSummary.Policy",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Policy {
        const NAME: &'static str = "Policy";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri = is.read_string()?;
                    },
                    18 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.digest.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.uri);
            }
            for (k, v) in &self.digest {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.uri.is_empty() {
                os.write_string(1, &self.uri)?;
            }
            for (k, v) in &self.digest {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(18)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Policy {
            Policy::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.digest.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Policy {
            static instance: ::protobuf::rt::Lazy<Policy> = ::protobuf::rt::Lazy::new();
            instance.get(Policy::new)
        }
    }

    impl ::protobuf::MessageFull for Policy {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("VerificationSummary.Policy").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Policy {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Policy {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:in_toto_attestation.predicates.vsa.v1.VerificationSummary.InputAttestation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct InputAttestation {
        // message fields
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.InputAttestation.uri)
        pub uri: ::std::string::String,
        // @@protoc_insertion_point(field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.InputAttestation.digest)
        pub digest: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.vsa.v1.VerificationSummary.InputAttestation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a InputAttestation {
        fn default() -> &'a InputAttestation {
            <InputAttestation as ::protobuf::Message>::default_instance()
        }
    }

    impl InputAttestation {
        pub fn new() -> InputAttestation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "uri",
                |m: &InputAttestation| { &m.uri },
                |m: &mut InputAttestation| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
                "digest",
                |m: &InputAttestation| { &m.digest },
                |m: &mut InputAttestation| { &mut m.digest },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InputAttestation>(
                "VerificationSummary.InputAttestation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for InputAttestation {
        const NAME: &'static str = "InputAttestation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.uri = is.read_string()?;
                    },
                    18 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_string()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.digest.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.uri.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.uri);
            }
            for (k, v) in &self.digest {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.uri.is_empty() {
                os.write_string(1, &self.uri)?;
            }
            for (k, v) in &self.digest {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::string_size(2, &v);
                os.write_raw_varint32(18)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> InputAttestation {
            InputAttestation::new()
        }

        fn clear(&mut self) {
            self.uri.clear();
            self.digest.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static InputAttestation {
            static instance: ::protobuf::rt::Lazy<InputAttestation> = ::protobuf::rt::Lazy::new();
            instance.get(InputAttestation::new)
        }
    }

    impl ::protobuf::MessageFull for InputAttestation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("VerificationSummary.InputAttestation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for InputAttestation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for InputAttestation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/in_toto_attestation/predicates/vsa/v1/vsa.proto\x12%in_toto_attestati\
    on.predicates.vsa.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa0\t\n\
    \x13VerificationSummary\x12_\n\x08verifier\x18\x01\x20\x01(\x0b2C.in_tot\
    o_attestation.predicates.vsa.v1.VerificationSummary.VerifierR\x08verifie\
    r\x12?\n\rtime_verified\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timest\
    ampR\x0ctimeVerified\x12!\n\x0cresource_uri\x18\x03\x20\x01(\tR\x0bresou\
    rceUri\x12Y\n\x06policy\x18\x04\x20\x01(\x0b2A.in_toto_attestation.predi\
    cates.vsa.v1.VerificationSummary.PolicyR\x06policy\x12z\n\x12input_attes\
    tations\x18\x05\x20\x03(\x0b2K.in_toto_attestation.predicates.vsa.v1.Ver\
    ificationSummary.InputAttestationR\x11inputAttestations\x12/\n\x13verifi\
    cation_result\x18\x06\x20\x01(\tR\x12verificationResult\x12'\n\x0fverifi\
    ed_levels\x18\x07\x20\x03(\tR\x0everifiedLevels\x12}\n\x11dependency_lev\
    els\x18\x08\x20\x03(\x0b2P.in_toto_attestation.predicates.vsa.v1.Verific\
    ationSummary.DependencyLevelsEntryR\x10dependencyLevels\x12!\n\x0cslsa_v\
    ersion\x18\t\x20\x01(\tR\x0bslsaVersion\x1a\x1a\n\x08Verifier\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x1a\xbc\x01\n\x06Policy\x12\x10\n\x03ur\
    i\x18\x01\x20\x01(\tR\x03uri\x12e\n\x06digest\x18\x02\x20\x03(\x0b2M.in_\
    toto_attestation.predicates.vsa.v1.VerificationSummary.Policy.DigestEntr\
    yR\x06digest\x1a9\n\x0bDigestEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a\
    \xd0\x01\n\x10InputAttestation\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03u\
    ri\x12o\n\x06digest\x18\x02\x20\x03(\x0b2W.in_toto_attestation.predicate\
    s.vsa.v1.VerificationSummary.InputAttestation.DigestEntryR\x06digest\x1a\
    9\n\x0bDigestEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aC\n\x15DependencyLev\
    elsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\x04R\x05value:\x028\x01Be\n.io.github.intoto.attestati\
    on.predicates.vsa.v1Z3github.com/in-toto/attestation/go/predicates/vsa/v\
    1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(VerificationSummary::generated_message_descriptor_data());
            messages.push(verification_summary::Verifier::generated_message_descriptor_data());
            messages.push(verification_summary::Policy::generated_message_descriptor_data());
            messages.push(verification_summary::InputAttestation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
