// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 24.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `in_toto_attestation/predicates/provenance/v1/provenance.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

use crate::v1::resource_descriptor;

// @@protoc_insertion_point(message:in_toto_attestation.predicates.provenance.v1.Provenance)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Provenance {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.Provenance.build_definition)
    pub build_definition: ::protobuf::MessageField<BuildDefinition>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.Provenance.run_details)
    pub run_details: ::protobuf::MessageField<RunDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.provenance.v1.Provenance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Provenance {
    fn default() -> &'a Provenance {
        <Provenance as ::protobuf::Message>::default_instance()
    }
}

impl Provenance {
    pub fn new() -> Provenance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BuildDefinition>(
            "build_definition",
            |m: &Provenance| { &m.build_definition },
            |m: &mut Provenance| { &mut m.build_definition },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RunDetails>(
            "run_details",
            |m: &Provenance| { &m.run_details },
            |m: &mut Provenance| { &mut m.run_details },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Provenance>(
            "Provenance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Provenance {
    const NAME: &'static str = "Provenance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.build_definition)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_details)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.build_definition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.build_definition.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.run_details.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Provenance {
        Provenance::new()
    }

    fn clear(&mut self) {
        self.build_definition.clear();
        self.run_details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Provenance {
        static instance: Provenance = Provenance {
            build_definition: ::protobuf::MessageField::none(),
            run_details: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Provenance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Provenance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Provenance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Provenance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.provenance.v1.BuildDefinition)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuildDefinition {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildDefinition.build_type)
    pub build_type: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildDefinition.external_parameters)
    pub external_parameters: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildDefinition.internal_parameters)
    pub internal_parameters: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildDefinition.resolved_dependencies)
    pub resolved_dependencies: ::std::vec::Vec<resource_descriptor::ResourceDescriptor>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.provenance.v1.BuildDefinition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuildDefinition {
    fn default() -> &'a BuildDefinition {
        <BuildDefinition as ::protobuf::Message>::default_instance()
    }
}

impl BuildDefinition {
    pub fn new() -> BuildDefinition {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "build_type",
            |m: &BuildDefinition| { &m.build_type },
            |m: &mut BuildDefinition| { &mut m.build_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "external_parameters",
            |m: &BuildDefinition| { &m.external_parameters },
            |m: &mut BuildDefinition| { &mut m.external_parameters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "internal_parameters",
            |m: &BuildDefinition| { &m.internal_parameters },
            |m: &mut BuildDefinition| { &mut m.internal_parameters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "resolved_dependencies",
            |m: &BuildDefinition| { &m.resolved_dependencies },
            |m: &mut BuildDefinition| { &mut m.resolved_dependencies },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuildDefinition>(
            "BuildDefinition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuildDefinition {
    const NAME: &'static str = "BuildDefinition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.build_type = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.external_parameters)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.internal_parameters)?;
                },
                34 => {
                    self.resolved_dependencies.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.build_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.build_type);
        }
        if let Some(v) = self.external_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.internal_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.resolved_dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.build_type.is_empty() {
            os.write_string(1, &self.build_type)?;
        }
        if let Some(v) = self.external_parameters.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.internal_parameters.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.resolved_dependencies {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuildDefinition {
        BuildDefinition::new()
    }

    fn clear(&mut self) {
        self.build_type.clear();
        self.external_parameters.clear();
        self.internal_parameters.clear();
        self.resolved_dependencies.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuildDefinition {
        static instance: BuildDefinition = BuildDefinition {
            build_type: ::std::string::String::new(),
            external_parameters: ::protobuf::MessageField::none(),
            internal_parameters: ::protobuf::MessageField::none(),
            resolved_dependencies: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuildDefinition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuildDefinition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuildDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildDefinition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.provenance.v1.RunDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RunDetails {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.RunDetails.builder)
    pub builder: ::protobuf::MessageField<Builder>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.RunDetails.metadata)
    pub metadata: ::protobuf::MessageField<BuildMetadata>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.RunDetails.byproducts)
    pub byproducts: ::std::vec::Vec<resource_descriptor::ResourceDescriptor>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.provenance.v1.RunDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunDetails {
    fn default() -> &'a RunDetails {
        <RunDetails as ::protobuf::Message>::default_instance()
    }
}

impl RunDetails {
    pub fn new() -> RunDetails {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Builder>(
            "builder",
            |m: &RunDetails| { &m.builder },
            |m: &mut RunDetails| { &mut m.builder },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BuildMetadata>(
            "metadata",
            |m: &RunDetails| { &m.metadata },
            |m: &mut RunDetails| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "byproducts",
            |m: &RunDetails| { &m.byproducts },
            |m: &mut RunDetails| { &mut m.byproducts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunDetails>(
            "RunDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunDetails {
    const NAME: &'static str = "RunDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.builder)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                26 => {
                    self.byproducts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.builder.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.byproducts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.builder.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.byproducts {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunDetails {
        RunDetails::new()
    }

    fn clear(&mut self) {
        self.builder.clear();
        self.metadata.clear();
        self.byproducts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunDetails {
        static instance: RunDetails = RunDetails {
            builder: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            byproducts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.provenance.v1.Builder)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Builder {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.Builder.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.Builder.version)
    pub version: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.Builder.builder_dependencies)
    pub builder_dependencies: ::std::vec::Vec<resource_descriptor::ResourceDescriptor>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.provenance.v1.Builder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Builder {
    fn default() -> &'a Builder {
        <Builder as ::protobuf::Message>::default_instance()
    }
}

impl Builder {
    pub fn new() -> Builder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Builder| { &m.id },
            |m: &mut Builder| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "version",
            |m: &Builder| { &m.version },
            |m: &mut Builder| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "builder_dependencies",
            |m: &Builder| { &m.builder_dependencies },
            |m: &mut Builder| { &mut m.builder_dependencies },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Builder>(
            "Builder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Builder {
    const NAME: &'static str = "Builder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.version.insert(key, value);
                },
                26 => {
                    self.builder_dependencies.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for (k, v) in &self.version {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.builder_dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for (k, v) in &self.version {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.builder_dependencies {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Builder {
        Builder::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.version.clear();
        self.builder_dependencies.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Builder {
        static instance: ::protobuf::rt::Lazy<Builder> = ::protobuf::rt::Lazy::new();
        instance.get(Builder::new)
    }
}

impl ::protobuf::MessageFull for Builder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Builder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Builder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Builder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:in_toto_attestation.predicates.provenance.v1.BuildMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuildMetadata {
    // message fields
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildMetadata.invocation_id)
    pub invocation_id: ::std::string::String,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildMetadata.started_on)
    pub started_on: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:in_toto_attestation.predicates.provenance.v1.BuildMetadata.finished_on)
    pub finished_on: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:in_toto_attestation.predicates.provenance.v1.BuildMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuildMetadata {
    fn default() -> &'a BuildMetadata {
        <BuildMetadata as ::protobuf::Message>::default_instance()
    }
}

impl BuildMetadata {
    pub fn new() -> BuildMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invocation_id",
            |m: &BuildMetadata| { &m.invocation_id },
            |m: &mut BuildMetadata| { &mut m.invocation_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "started_on",
            |m: &BuildMetadata| { &m.started_on },
            |m: &mut BuildMetadata| { &mut m.started_on },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "finished_on",
            |m: &BuildMetadata| { &m.finished_on },
            |m: &mut BuildMetadata| { &mut m.finished_on },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuildMetadata>(
            "BuildMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuildMetadata {
    const NAME: &'static str = "BuildMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invocation_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.started_on)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.finished_on)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.invocation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invocation_id);
        }
        if let Some(v) = self.started_on.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.finished_on.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.invocation_id.is_empty() {
            os.write_string(1, &self.invocation_id)?;
        }
        if let Some(v) = self.started_on.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.finished_on.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuildMetadata {
        BuildMetadata::new()
    }

    fn clear(&mut self) {
        self.invocation_id.clear();
        self.started_on.clear();
        self.finished_on.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuildMetadata {
        static instance: BuildMetadata = BuildMetadata {
            invocation_id: ::std::string::String::new(),
            started_on: ::protobuf::MessageField::none(),
            finished_on: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuildMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuildMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuildMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=in_toto_attestation/predicates/provenance/v1/provenance.proto\x12,in_\
    toto_attestation.predicates.provenance.v1\x1a0in_toto_attestation/v1/res\
    ource_descriptor.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle\
    /protobuf/timestamp.proto\"\xd1\x01\n\nProvenance\x12h\n\x10build_defini\
    tion\x18\x01\x20\x01(\x0b2=.in_toto_attestation.predicates.provenance.v1\
    .BuildDefinitionR\x0fbuildDefinition\x12Y\n\x0brun_details\x18\x02\x20\
    \x01(\x0b28.in_toto_attestation.predicates.provenance.v1.RunDetailsR\nru\
    nDetails\"\xa5\x02\n\x0fBuildDefinition\x12\x1d\n\nbuild_type\x18\x01\
    \x20\x01(\tR\tbuildType\x12H\n\x13external_parameters\x18\x02\x20\x01(\
    \x0b2\x17.google.protobuf.StructR\x12externalParameters\x12H\n\x13intern\
    al_parameters\x18\x03\x20\x01(\x0b2\x17.google.protobuf.StructR\x12inter\
    nalParameters\x12_\n\x15resolved_dependencies\x18\x04\x20\x03(\x0b2*.in_\
    toto_attestation.v1.ResourceDescriptorR\x14resolvedDependencies\"\x82\
    \x02\n\nRunDetails\x12O\n\x07builder\x18\x01\x20\x01(\x0b25.in_toto_atte\
    station.predicates.provenance.v1.BuilderR\x07builder\x12W\n\x08metadata\
    \x18\x02\x20\x01(\x0b2;.in_toto_attestation.predicates.provenance.v1.Bui\
    ldMetadataR\x08metadata\x12J\n\nbyproducts\x18\x03\x20\x03(\x0b2*.in_tot\
    o_attestation.v1.ResourceDescriptorR\nbyproducts\"\x92\x02\n\x07Builder\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\\\n\x07version\x18\x02\
    \x20\x03(\x0b2B.in_toto_attestation.predicates.provenance.v1.Builder.Ver\
    sionEntryR\x07version\x12]\n\x14builder_dependencies\x18\x03\x20\x03(\
    \x0b2*.in_toto_attestation.v1.ResourceDescriptorR\x13builderDependencies\
    \x1a:\n\x0cVersionEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xac\x01\n\rBuil\
    dMetadata\x12#\n\rinvocation_id\x18\x01\x20\x01(\tR\x0cinvocationId\x129\
    \n\nstarted_on\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tsta\
    rtedOn\x12;\n\x0bfinished_on\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\nfinishedOnBs\n5io.github.intoto.attestation.predicates.proven\
    ance.v1Z:github.com/in-toto/attestation/go/predicates/provenance/v1b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(resource_descriptor::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Provenance::generated_message_descriptor_data());
            messages.push(BuildDefinition::generated_message_descriptor_data());
            messages.push(RunDetails::generated_message_descriptor_data());
            messages.push(Builder::generated_message_descriptor_data());
            messages.push(BuildMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
